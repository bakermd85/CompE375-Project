
328P-Project-8x8LEDMatrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  0000018a  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  008001aa  008001aa  000002c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000257  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000015d  00000000  00000000  000005bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e2  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00000b00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006b6b  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000022d  00000000  00000000  000076cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000078fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000021f  00000000  00000000  0000796c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e8       	ldi	r30, 0x8A	; 138
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 3a       	cpi	r26, 0xAA	; 170
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa ea       	ldi	r26, 0xAA	; 170
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 3a       	cpi	r26, 0xAB	; 171
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	6f d0       	rcall	.+222    	; 0x17a <main>
  9c:	74 c0       	rjmp	.+232    	; 0x186 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <display_numerals>:
		display_numerals();
	}
}

void display_numerals(void)
{
  a0:	ef 92       	push	r14
  a2:	ff 92       	push	r15
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	0f 2e       	mov	r0, r31
  b2:	fa e0       	ldi	r31, 0x0A	; 10
  b4:	ef 2e       	mov	r14, r31
  b6:	f1 e0       	ldi	r31, 0x01	; 1
  b8:	ff 2e       	mov	r15, r31
  ba:	f0 2d       	mov	r31, r0
					PORTD = ~numeralArray[l][k];
					PORTC = 0x00;
				}
				else
				{
					PORTC = ((0x00) | (1<<(k-4)));
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	30 e0       	ldi	r19, 0x00	; 0
		display_numerals();
	}
}

void display_numerals(void)
{
  c0:	d0 e0       	ldi	r29, 0x00	; 0
  c2:	c0 e0       	ldi	r28, 0x00	; 0
	for(int i=0; i<sizeof digitArray; i++)
	{
		l = digitArray[i];
  c4:	8d 91       	ld	r24, X+
  c6:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <__data_end>
  ca:	42 e3       	ldi	r20, 0x32	; 50
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	47 c0       	rjmp	.+142    	; 0x15e <display_numerals+0xbe>
		
		for(int j=0; j<50; j++)
		{
			for(int k=0; k<8;k++)
			{
				if(k<4)
  d0:	84 30       	cpi	r24, 0x04	; 4
  d2:	91 05       	cpc	r25, r1
  d4:	d4 f4       	brge	.+52     	; 0x10a <display_numerals+0x6a>
				{
					PORTB = ((0x00) | (1<<k));
  d6:	f9 01       	movw	r30, r18
  d8:	08 2e       	mov	r0, r24
  da:	02 c0       	rjmp	.+4      	; 0xe0 <display_numerals+0x40>
  dc:	ee 0f       	add	r30, r30
  de:	ff 1f       	adc	r31, r31
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <display_numerals+0x3c>
  e4:	e5 b9       	out	0x05, r30	; 5
					PORTD = ~numeralArray[l][k];
  e6:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <__data_end>
  ea:	8c 01       	movw	r16, r24
  ec:	68 e0       	ldi	r22, 0x08	; 8
  ee:	e6 9f       	mul	r30, r22
  f0:	00 0d       	add	r16, r0
  f2:	11 1d       	adc	r17, r1
  f4:	11 24       	eor	r1, r1
  f6:	f8 01       	movw	r30, r16
  f8:	ee 0f       	add	r30, r30
  fa:	ff 1f       	adc	r31, r31
  fc:	e6 5f       	subi	r30, 0xF6	; 246
  fe:	fe 4f       	sbci	r31, 0xFE	; 254
 100:	e0 81       	ld	r30, Z
 102:	e0 95       	com	r30
 104:	eb b9       	out	0x0b, r30	; 11
					PORTC = 0x00;
 106:	18 b8       	out	0x08, r1	; 8
 108:	1a c0       	rjmp	.+52     	; 0x13e <display_numerals+0x9e>
 10a:	fc 01       	movw	r30, r24
 10c:	34 97       	sbiw	r30, 0x04	; 4
				}
				else
				{
					PORTC = ((0x00) | (1<<(k-4)));
 10e:	89 01       	movw	r16, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <display_numerals+0x76>
 112:	00 0f       	add	r16, r16
 114:	11 1f       	adc	r17, r17
 116:	ea 95       	dec	r30
 118:	e2 f7       	brpl	.-8      	; 0x112 <display_numerals+0x72>
 11a:	08 b9       	out	0x08, r16	; 8
					PORTD = ~numeralArray[l][k];
 11c:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <__data_end>
 120:	bc 01       	movw	r22, r24
 122:	08 e0       	ldi	r16, 0x08	; 8
 124:	e0 9f       	mul	r30, r16
 126:	60 0d       	add	r22, r0
 128:	71 1d       	adc	r23, r1
 12a:	11 24       	eor	r1, r1
 12c:	fb 01       	movw	r30, r22
 12e:	ee 0f       	add	r30, r30
 130:	ff 1f       	adc	r31, r31
 132:	e6 5f       	subi	r30, 0xF6	; 246
 134:	fe 4f       	sbci	r31, 0xFE	; 254
 136:	e0 81       	ld	r30, Z
 138:	e0 95       	com	r30
 13a:	eb b9       	out	0x0b, r30	; 11
					PORTB = 0x00;
 13c:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	ef eb       	ldi	r30, 0xBF	; 191
 140:	f2 e1       	ldi	r31, 0x12	; 18
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <display_numerals+0xa2>
 146:	00 c0       	rjmp	.+0      	; 0x148 <display_numerals+0xa8>
 148:	00 00       	nop
				}
				
				_delay_ms(1.2);
					
				PORTB = 0x00;
 14a:	15 b8       	out	0x05, r1	; 5
				PORTC = 0x00;
 14c:	18 b8       	out	0x08, r1	; 8
	{
		l = digitArray[i];
		
		for(int j=0; j<50; j++)
		{
			for(int k=0; k<8;k++)
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	88 30       	cpi	r24, 0x08	; 8
 152:	91 05       	cpc	r25, r1
 154:	09 f0       	breq	.+2      	; 0x158 <display_numerals+0xb8>
 156:	bc cf       	rjmp	.-136    	; 0xd0 <display_numerals+0x30>
 158:	41 50       	subi	r20, 0x01	; 1
 15a:	51 09       	sbc	r21, r1
{
	for(int i=0; i<sizeof digitArray; i++)
	{
		l = digitArray[i];
		
		for(int j=0; j<50; j++)
 15c:	19 f0       	breq	.+6      	; 0x164 <display_numerals+0xc4>
		display_numerals();
	}
}

void display_numerals(void)
{
 15e:	8d 2f       	mov	r24, r29
 160:	9c 2f       	mov	r25, r28
 162:	b6 cf       	rjmp	.-148    	; 0xd0 <display_numerals+0x30>
	for(int i=0; i<sizeof digitArray; i++)
 164:	ae 15       	cp	r26, r14
 166:	bf 05       	cpc	r27, r15
 168:	09 f0       	breq	.+2      	; 0x16c <display_numerals+0xcc>
 16a:	ac cf       	rjmp	.-168    	; 0xc4 <display_numerals+0x24>
				PORTC = 0x00;
			}
		}
	}		
	
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	0f 91       	pop	r16
 174:	ff 90       	pop	r15
 176:	ef 90       	pop	r14
 178:	08 95       	ret

0000017a <main>:
void display_waiting(void);
void display_numerals(void);

int main(void)
{
	DDRD = 0xFF;//PORTB,C,D are set as output
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
 17e:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;
 180:	87 b9       	out	0x07, r24	; 7
	
	while(1)
	{
		//display_waiting();
		display_numerals();
 182:	8e df       	rcall	.-228    	; 0xa0 <display_numerals>
	}
 184:	fe cf       	rjmp	.-4      	; 0x182 <main+0x8>

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
