
328P-Project-8x8LEDMatrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  000001d6  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  008001a0  008001a0  0000030a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000030a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002b4  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000175  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000044e  00000000  00000000  000007dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00000c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006ef4  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000022f  00000000  00000000  00007b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00007dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000228  00000000  00000000  00007de7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	49 c0       	rjmp	.+146    	; 0xa0 <__vector_3>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ed       	ldi	r30, 0xD6	; 214
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 3a       	cpi	r26, 0xA0	; 160
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 ea       	ldi	r26, 0xA0	; 160
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 3a       	cpi	r26, 0xA2	; 162
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	6f d0       	rcall	.+222    	; 0x17a <main>
  9c:	9a c0       	rjmp	.+308    	; 0x1d2 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <__vector_3>:
									  
***************************************************************************************/


ISR(PCINT0_vect)
{
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	8f 93       	push	r24
	if(!(PINB & (1<<7)))
  ac:	1f 99       	sbic	0x03, 7	; 3
  ae:	05 c0       	rjmp	.+10     	; 0xba <__vector_3+0x1a>
	{
		pb7Flag ++;
  b0:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <pb7Flag>
  b4:	8f 5f       	subi	r24, 0xFF	; 255
  b6:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <pb7Flag>
	}
}
  ba:	8f 91       	pop	r24
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <display_numerals>:

****************************************************************************************/


void display_numerals(void)
{
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
	
	PORTB = 0x00;
  ca:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;
  cc:	18 b8       	out	0x08, r1	; 8
  ce:	62 e3       	ldi	r22, 0x32	; 50
  d0:	70 e0       	ldi	r23, 0x00	; 0

****************************************************************************************/


void display_numerals(void)
{
  d2:	d0 e0       	ldi	r29, 0x00	; 0
  d4:	c0 e0       	ldi	r28, 0x00	; 0
				PORTD = ~numeralArray[displayDigit][k];
				PORTC = 0x00;
			}
			else
			{
				PORTC = ((0x00) | (1<<(k-4)));
  d6:	41 e0       	ldi	r20, 0x01	; 1
  d8:	50 e0       	ldi	r21, 0x00	; 0
				PORTD = ~numeralArray[displayDigit][k];
				PORTB = 0b10000000;
  da:	b0 e8       	ldi	r27, 0x80	; 128
  dc:	ab 2f       	mov	r26, r27
  de:	47 c0       	rjmp	.+142    	; 0x16e <display_numerals+0xa8>
	
	for(int j=0; j<50; j++)
	{
		for(int k=0; k<8;k++)
		{
			if(k<4)
  e0:	84 30       	cpi	r24, 0x04	; 4
  e2:	91 05       	cpc	r25, r1
  e4:	d4 f4       	brge	.+52     	; 0x11a <display_numerals+0x54>
			{
				PORTB = ((0b10000000) | (1<<k));
  e6:	9a 01       	movw	r18, r20
  e8:	08 2e       	mov	r0, r24
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <display_numerals+0x2a>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	0a 94       	dec	r0
  f2:	e2 f7       	brpl	.-8      	; 0xec <display_numerals+0x26>
  f4:	20 68       	ori	r18, 0x80	; 128
  f6:	25 b9       	out	0x05, r18	; 5
				PORTD = ~numeralArray[displayDigit][k];
  f8:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <__data_end>
  fc:	fc 01       	movw	r30, r24
  fe:	38 e0       	ldi	r19, 0x08	; 8
 100:	23 9f       	mul	r18, r19
 102:	e0 0d       	add	r30, r0
 104:	f1 1d       	adc	r31, r1
 106:	11 24       	eor	r1, r1
 108:	ee 0f       	add	r30, r30
 10a:	ff 1f       	adc	r31, r31
 10c:	e0 50       	subi	r30, 0x00	; 0
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	20 81       	ld	r18, Z
 112:	20 95       	com	r18
 114:	2b b9       	out	0x0b, r18	; 11
				PORTC = 0x00;
 116:	18 b8       	out	0x08, r1	; 8
 118:	1a c0       	rjmp	.+52     	; 0x14e <display_numerals+0x88>
 11a:	9c 01       	movw	r18, r24
 11c:	24 50       	subi	r18, 0x04	; 4
 11e:	31 09       	sbc	r19, r1
			}
			else
			{
				PORTC = ((0x00) | (1<<(k-4)));
 120:	fa 01       	movw	r30, r20
 122:	02 c0       	rjmp	.+4      	; 0x128 <display_numerals+0x62>
 124:	ee 0f       	add	r30, r30
 126:	ff 1f       	adc	r31, r31
 128:	2a 95       	dec	r18
 12a:	e2 f7       	brpl	.-8      	; 0x124 <display_numerals+0x5e>
 12c:	e8 b9       	out	0x08, r30	; 8
				PORTD = ~numeralArray[displayDigit][k];
 12e:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <__data_end>
 132:	fc 01       	movw	r30, r24
 134:	38 e0       	ldi	r19, 0x08	; 8
 136:	23 9f       	mul	r18, r19
 138:	e0 0d       	add	r30, r0
 13a:	f1 1d       	adc	r31, r1
 13c:	11 24       	eor	r1, r1
 13e:	ee 0f       	add	r30, r30
 140:	ff 1f       	adc	r31, r31
 142:	e0 50       	subi	r30, 0x00	; 0
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	20 81       	ld	r18, Z
 148:	20 95       	com	r18
 14a:	2b b9       	out	0x0b, r18	; 11
				PORTB = 0b10000000;
 14c:	b5 b9       	out	0x05, r27	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14e:	ef eb       	ldi	r30, 0xBF	; 191
 150:	f2 e1       	ldi	r31, 0x12	; 18
 152:	31 97       	sbiw	r30, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <display_numerals+0x8c>
 156:	00 c0       	rjmp	.+0      	; 0x158 <display_numerals+0x92>
 158:	00 00       	nop
			}
			
			_delay_ms(1.2);
			
			PORTB = 0b10000000;
 15a:	a5 b9       	out	0x05, r26	; 5
			PORTC = 0x00;
 15c:	18 b8       	out	0x08, r1	; 8
	PORTB = 0x00;
	PORTC = 0x00;
	
	for(int j=0; j<50; j++)
	{
		for(int k=0; k<8;k++)
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	88 30       	cpi	r24, 0x08	; 8
 162:	91 05       	cpc	r25, r1
 164:	09 f0       	breq	.+2      	; 0x168 <display_numerals+0xa2>
 166:	bc cf       	rjmp	.-136    	; 0xe0 <display_numerals+0x1a>
 168:	61 50       	subi	r22, 0x01	; 1
 16a:	71 09       	sbc	r23, r1
{
	
	PORTB = 0x00;
	PORTC = 0x00;
	
	for(int j=0; j<50; j++)
 16c:	19 f0       	breq	.+6      	; 0x174 <display_numerals+0xae>

****************************************************************************************/


void display_numerals(void)
{
 16e:	8d 2f       	mov	r24, r29
 170:	9c 2f       	mov	r25, r28
 172:	b6 cf       	rjmp	.-148    	; 0xe0 <display_numerals+0x1a>
			
			PORTB = 0b10000000;
			PORTC = 0x00;
		}
	}
}
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <main>:
void display_waiting(void);
void display_numerals(void);

int main(void)
{
	DDRD = 0xFF;//PORTB,C,D are set as output
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	8a b9       	out	0x0a, r24	; 10
	//DDRB = 0xFF;
	DDRB = 0b01111111;
 17e:	9f e7       	ldi	r25, 0x7F	; 127
 180:	94 b9       	out	0x04, r25	; 4
	DDRC = 0xFF;
 182:	87 b9       	out	0x07, r24	; 7

	PORTB |= (1 << PORTB7);  //set pull up	
 184:	2f 9a       	sbi	0x05, 7	; 5
	
	PCICR |= (1 << PCIE0);  // enable PCMSK0 scan
 186:	e8 e6       	ldi	r30, 0x68	; 104
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	81 60       	ori	r24, 0x01	; 1
 18e:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0); //PCINT0 will trigger on state change
 190:	eb e6       	ldi	r30, 0x6B	; 107
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	81 60       	ori	r24, 0x01	; 1
 198:	80 83       	st	Z, r24
	
	sei();
 19a:	78 94       	sei
	
	while(1)
	{
		if(pb7Flag > 0 )
 19c:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <pb7Flag>
 1a0:	88 23       	and	r24, r24
 1a2:	a9 f0       	breq	.+42     	; 0x1ce <main+0x54>
 1a4:	2f ef       	ldi	r18, 0xFF	; 255
 1a6:	8a e6       	ldi	r24, 0x6A	; 106
 1a8:	93 e0       	ldi	r25, 0x03	; 3
 1aa:	21 50       	subi	r18, 0x01	; 1
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0x30>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x3a>
 1b4:	00 00       	nop
		{
			_delay_ms(70);
			
			if(displayDigit == 9)
 1b6:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end>
 1ba:	89 30       	cpi	r24, 0x09	; 9
 1bc:	19 f4       	brne	.+6      	; 0x1c4 <main+0x4a>
			{
				displayDigit = 0;		
 1be:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__data_end>
 1c2:	03 c0       	rjmp	.+6      	; 0x1ca <main+0x50>
			}
			else
			{
				displayDigit ++;
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
 1c6:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <__data_end>
			}
			
			pb7Flag = 0;
 1ca:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <pb7Flag>
		}
		//display_waiting();
		display_numerals();
 1ce:	7b df       	rcall	.-266    	; 0xc6 <display_numerals>
		
	}
 1d0:	e5 cf       	rjmp	.-54     	; 0x19c <main+0x22>

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
