
328P-Project-8x8LEDMatrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  00000350  000003e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000350  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  008001a2  008001a2  00000486  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000486  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002a2  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000014a  00000000  00000000  000007f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a2  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00000de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006b3e  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000200  00000000  00000000  000079e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00007be2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000096  00000000  00000000  00007c42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	ec c0       	rjmp	.+472    	; 0x1e6 <__vector_3>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	fc c0       	rjmp	.+504    	; 0x226 <__vector_11>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	e7 c0       	rjmp	.+462    	; 0x208 <__vector_14>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e5       	ldi	r30, 0x50	; 80
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 3a       	cpi	r26, 0xA2	; 162
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 ea       	ldi	r26, 0xA2	; 162
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 3a       	cpi	r26, 0xA7	; 167
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	fd d0       	rcall	.+506    	; 0x296 <main>
  9c:	57 c1       	rjmp	.+686    	; 0x34c <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <display_numerals>:
void display_numerals(void)
{
	
	int x;
	
	PORTB = 0x00;
  a0:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;
  a2:	18 b8       	out	0x08, r1	; 8
	

		for(int k=0; k<8;k++)
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
				PORTD = ~numeralArray[displayDigit][k];
				PORTC = 0x00;
			}
			else
			{
				PORTC = ((0x00) | (1<<(k-4)));
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	50 e0       	ldi	r21, 0x00	; 0
				PORTD = ~numeralArray[displayDigit][k];
				PORTB = 0b10000000;
  ac:	60 e8       	ldi	r22, 0x80	; 128
	PORTC = 0x00;
	

		for(int k=0; k<8;k++)
		{
			if(k<4)
  ae:	84 30       	cpi	r24, 0x04	; 4
  b0:	91 05       	cpc	r25, r1
  b2:	d4 f4       	brge	.+52     	; 0xe8 <display_numerals+0x48>
			{
				PORTB = ((0b10000000) | (1<<k));
  b4:	9a 01       	movw	r18, r20
  b6:	08 2e       	mov	r0, r24
  b8:	02 c0       	rjmp	.+4      	; 0xbe <display_numerals+0x1e>
  ba:	22 0f       	add	r18, r18
  bc:	33 1f       	adc	r19, r19
  be:	0a 94       	dec	r0
  c0:	e2 f7       	brpl	.-8      	; 0xba <display_numerals+0x1a>
  c2:	20 68       	ori	r18, 0x80	; 128
  c4:	25 b9       	out	0x05, r18	; 5
				PORTD = ~numeralArray[displayDigit][k];
  c6:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <displayDigit>
  ca:	fc 01       	movw	r30, r24
  cc:	38 e0       	ldi	r19, 0x08	; 8
  ce:	23 9f       	mul	r18, r19
  d0:	e0 0d       	add	r30, r0
  d2:	f1 1d       	adc	r31, r1
  d4:	11 24       	eor	r1, r1
  d6:	ee 0f       	add	r30, r30
  d8:	ff 1f       	adc	r31, r31
  da:	ef 5f       	subi	r30, 0xFF	; 255
  dc:	fe 4f       	sbci	r31, 0xFE	; 254
  de:	20 81       	ld	r18, Z
  e0:	20 95       	com	r18
  e2:	2b b9       	out	0x0b, r18	; 11
				PORTC = 0x00;
  e4:	18 b8       	out	0x08, r1	; 8
  e6:	1a c0       	rjmp	.+52     	; 0x11c <display_numerals+0x7c>
  e8:	9c 01       	movw	r18, r24
  ea:	24 50       	subi	r18, 0x04	; 4
  ec:	31 09       	sbc	r19, r1
			}
			else
			{
				PORTC = ((0x00) | (1<<(k-4)));
  ee:	fa 01       	movw	r30, r20
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <display_numerals+0x56>
  f2:	ee 0f       	add	r30, r30
  f4:	ff 1f       	adc	r31, r31
  f6:	2a 95       	dec	r18
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <display_numerals+0x52>
  fa:	e8 b9       	out	0x08, r30	; 8
				PORTD = ~numeralArray[displayDigit][k];
  fc:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <displayDigit>
 100:	fc 01       	movw	r30, r24
 102:	38 e0       	ldi	r19, 0x08	; 8
 104:	23 9f       	mul	r18, r19
 106:	e0 0d       	add	r30, r0
 108:	f1 1d       	adc	r31, r1
 10a:	11 24       	eor	r1, r1
 10c:	ee 0f       	add	r30, r30
 10e:	ff 1f       	adc	r31, r31
 110:	ef 5f       	subi	r30, 0xFF	; 255
 112:	fe 4f       	sbci	r31, 0xFE	; 254
 114:	20 81       	ld	r18, Z
 116:	20 95       	com	r18
 118:	2b b9       	out	0x0b, r18	; 11
				PORTB = 0b10000000;
 11a:	65 b9       	out	0x05, r22	; 5
			}
			
		   //1 ms delay
			while(x < 1)
			{
				if(msDelay == 1 )
 11c:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <msDelay>
 120:	21 30       	cpi	r18, 0x01	; 1
 122:	21 f0       	breq	.+8      	; 0x12c <display_numerals+0x8c>
 124:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <msDelay>
 128:	21 30       	cpi	r18, 0x01	; 1
 12a:	e1 f7       	brne	.-8      	; 0x124 <display_numerals+0x84>
				{
					x++;
					msDelay = 0;
 12c:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <msDelay>
				}
			}
			
			x = 0;	
			
			PORTB = 0b10000000;
 130:	65 b9       	out	0x05, r22	; 5
			PORTC = 0x00;
 132:	18 b8       	out	0x08, r1	; 8
	
	PORTB = 0x00;
	PORTC = 0x00;
	

		for(int k=0; k<8;k++)
 134:	01 96       	adiw	r24, 0x01	; 1
 136:	88 30       	cpi	r24, 0x08	; 8
 138:	91 05       	cpc	r25, r1
 13a:	09 f0       	breq	.+2      	; 0x13e <display_numerals+0x9e>
 13c:	b8 cf       	rjmp	.-144    	; 0xae <display_numerals+0xe>
			PORTB = 0b10000000;
			PORTC = 0x00;
			
		}
	
}
 13e:	08 95       	ret

00000140 <display_waiting>:

void display_waiting(void)
{
	int x = 0;
	
	displayDigit = 0;
 140:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <displayDigit>
	
	if(displayRow >= 8)
 144:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
 148:	88 30       	cpi	r24, 0x08	; 8
 14a:	20 f0       	brcs	.+8      	; 0x154 <display_waiting+0x14>
	{
		displayRow = 0;
 14c:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <__data_end>
	}

	if(displayRow <4)
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <display_waiting+0x18>
 154:	84 30       	cpi	r24, 0x04	; 4
 156:	68 f4       	brcc	.+26     	; 0x172 <display_waiting+0x32>
	{
		PORTB = ((0b10000000) | (1<<displayRow));
 158:	21 e0       	ldi	r18, 0x01	; 1
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	a9 01       	movw	r20, r18
 15e:	02 c0       	rjmp	.+4      	; 0x164 <display_waiting+0x24>
 160:	44 0f       	add	r20, r20
 162:	55 1f       	adc	r21, r21
 164:	8a 95       	dec	r24
 166:	e2 f7       	brpl	.-8      	; 0x160 <display_waiting+0x20>
 168:	ca 01       	movw	r24, r20
 16a:	80 68       	ori	r24, 0x80	; 128
 16c:	85 b9       	out	0x05, r24	; 5
		PORTC = 0x00;
 16e:	18 b8       	out	0x08, r1	; 8
 170:	33 c0       	rjmp	.+102    	; 0x1d8 <display_waiting+0x98>
	}
	else
	{
		PORTC = ((0b10000000) | (1<<(displayRow-4)));
 172:	84 50       	subi	r24, 0x04	; 4
 174:	21 e0       	ldi	r18, 0x01	; 1
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	a9 01       	movw	r20, r18
 17a:	02 c0       	rjmp	.+4      	; 0x180 <display_waiting+0x40>
 17c:	44 0f       	add	r20, r20
 17e:	55 1f       	adc	r21, r21
 180:	8a 95       	dec	r24
 182:	e2 f7       	brpl	.-8      	; 0x17c <display_waiting+0x3c>
 184:	ca 01       	movw	r24, r20
 186:	80 68       	ori	r24, 0x80	; 128
 188:	88 b9       	out	0x08, r24	; 8
		PORTB = 0x00;
 18a:	15 b8       	out	0x05, r1	; 5
 18c:	25 c0       	rjmp	.+74     	; 0x1d8 <display_waiting+0x98>
	}
			
	for(int i = 0; i < 8; i++ )
	{
		PORTD = (0xFF) & (~(1<<i));
 18e:	cf 01       	movw	r24, r30
 190:	04 2e       	mov	r0, r20
 192:	02 c0       	rjmp	.+4      	; 0x198 <display_waiting+0x58>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	0a 94       	dec	r0
 19a:	e2 f7       	brpl	.-8      	; 0x194 <display_waiting+0x54>
 19c:	80 95       	com	r24
 19e:	8b b9       	out	0x0b, r24	; 11
 1a0:	27 2f       	mov	r18, r23
 1a2:	36 2f       	mov	r19, r22
 1a4:	09 c0       	rjmp	.+18     	; 0x1b8 <display_waiting+0x78>
			
		//100 ms delay
		while(x < 100)
		{
			if(msDelay == 1 )
 1a6:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <msDelay>
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <display_waiting+0x66>
			{
				x++;
				msDelay = 0;
 1ae:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <msDelay>
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	31 09       	sbc	r19, r1
	for(int i = 0; i < 8; i++ )
	{
		PORTD = (0xFF) & (~(1<<i));
			
		//100 ms delay
		while(x < 100)
 1b6:	29 f0       	breq	.+10     	; 0x1c2 <display_waiting+0x82>
		{
			if(msDelay == 1 )
 1b8:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <msDelay>
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	99 f7       	brne	.-26     	; 0x1a6 <display_waiting+0x66>
 1c0:	f6 cf       	rjmp	.-20     	; 0x1ae <display_waiting+0x6e>
	{
		PORTC = ((0b10000000) | (1<<(displayRow-4)));
		PORTB = 0x00;
	}
			
	for(int i = 0; i < 8; i++ )
 1c2:	4f 5f       	subi	r20, 0xFF	; 255
 1c4:	5f 4f       	sbci	r21, 0xFF	; 255
 1c6:	48 30       	cpi	r20, 0x08	; 8
 1c8:	51 05       	cpc	r21, r1
 1ca:	09 f7       	brne	.-62     	; 0x18e <display_waiting+0x4e>
		}
			
		x = 0;			
	}
	
	displayRow ++;
 1cc:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
 1d0:	8f 5f       	subi	r24, 0xFF	; 255
 1d2:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__data_end>
 1d6:	08 95       	ret
	if(displayRow >= 8)
	{
		displayRow = 0;
	}

	if(displayRow <4)
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	50 e0       	ldi	r21, 0x00	; 0
		PORTB = 0x00;
	}
			
	for(int i = 0; i < 8; i++ )
	{
		PORTD = (0xFF) & (~(1<<i));
 1dc:	e1 e0       	ldi	r30, 0x01	; 1
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	74 e6       	ldi	r23, 0x64	; 100
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	d4 cf       	rjmp	.-88     	; 0x18e <display_waiting+0x4e>

000001e6 <__vector_3>:
									  
***************************************************************************************/


ISR(PCINT0_vect)
{
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	8f 93       	push	r24
	
	if(!(PINB & (1<<7)))
 1f2:	1f 99       	sbic	0x03, 7	; 3
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <__vector_3+0x16>
	{
		pb7Flag = 1;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <pb7Flag>
	}

}
 1fc:	8f 91       	pop	r24
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	8f 93       	push	r24
	msDelay = 1;	
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <msDelay>
}
 21a:	8f 91       	pop	r24
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	8f 93       	push	r24
	secDelay = 1;
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <secDelay>
}
 238:	8f 91       	pop	r24
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <generateTimer>:
	displayRow ++;
}

void generateTimer(void)
{ 
	TCCR1A |= (1<<WGM12); //Set to CTC Mode
 244:	e0 e8       	ldi	r30, 0x80	; 128
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	88 60       	ori	r24, 0x08	; 8
 24c:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS12) | (1<<CS10);
 24e:	e1 e8       	ldi	r30, 0x81	; 129
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	85 60       	ori	r24, 0x05	; 5
 256:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A);
 258:	ef e6       	ldi	r30, 0x6F	; 111
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	82 60       	ori	r24, 0x02	; 2
 260:	80 83       	st	Z, r24
	OCR1A = 7813;
 262:	85 e8       	ldi	r24, 0x85	; 133
 264:	9e e1       	ldi	r25, 0x1E	; 30
 266:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 26a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 26e:	08 95       	ret

00000270 <generateTimer0>:
}

void generateTimer0(void)
{ 
	ADCSRB |= (1<<ADTS0) | (1<<ADTS1); //Set Timer/Counter 0 Compare Match A
 270:	eb e7       	ldi	r30, 0x7B	; 123
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	83 60       	ori	r24, 0x03	; 3
 278:	80 83       	st	Z, r24
	
	TCCR0B |= (1<<CS00) | (1<<CS02); //Set prescaler to 1024
 27a:	85 b5       	in	r24, 0x25	; 37
 27c:	85 60       	ori	r24, 0x05	; 5
 27e:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= (1<<WGM01);  //Set to CTC Mode
 280:	84 b5       	in	r24, 0x24	; 36
 282:	82 60       	ori	r24, 0x02	; 2
 284:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= (1<<OCIE0A); //Compare Match A interrupt enabled
 286:	ee e6       	ldi	r30, 0x6E	; 110
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	82 60       	ori	r24, 0x02	; 2
 28e:	80 83       	st	Z, r24
	
	OCR0A = 10;
 290:	8a e0       	ldi	r24, 0x0A	; 10
 292:	87 bd       	out	0x27, r24	; 39
 294:	08 95       	ret

00000296 <main>:
	
	int (*functionPtr) (void);
	
	functionPtr = &display_waiting;
	
	DDRD = 0xFF;//PORTB,C,D are set as output
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b01111111;
 29a:	9f e7       	ldi	r25, 0x7F	; 127
 29c:	94 b9       	out	0x04, r25	; 4
	DDRC = 0xFF;
 29e:	87 b9       	out	0x07, r24	; 7

	PORTB |= (1 << PORTB7);  //set pull up	
 2a0:	2f 9a       	sbi	0x05, 7	; 5
	
	PCICR |= (1 << PCIE0);  // enable PCMSK0 scan
 2a2:	e8 e6       	ldi	r30, 0x68	; 104
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	81 60       	ori	r24, 0x01	; 1
 2aa:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0); //PCINT0 will trigger on state change
 2ac:	eb e6       	ldi	r30, 0x6B	; 107
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	81 60       	ori	r24, 0x01	; 1
 2b4:	80 83       	st	Z, r24
	
	sei();
 2b6:	78 94       	sei
	
	generateTimer();
 2b8:	c5 df       	rcall	.-118    	; 0x244 <generateTimer>
	generateTimer0();
 2ba:	da df       	rcall	.-76     	; 0x270 <generateTimer0>
{
	int x;
	
	int (*functionPtr) (void);
	
	functionPtr = &display_waiting;
 2bc:	00 ea       	ldi	r16, 0xA0	; 160
 2be:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1)
	{
		if(pb7Flag == 1)
		{
			countDown = 10;
 2c0:	0f 2e       	mov	r0, r31
 2c2:	fa e0       	ldi	r31, 0x0A	; 10
 2c4:	ff 2e       	mov	r15, r31
 2c6:	f0 2d       	mov	r31, r0
 2c8:	0f 2e       	mov	r0, r31
 2ca:	f8 ec       	ldi	r31, 0xC8	; 200
 2cc:	df 2e       	mov	r13, r31
 2ce:	f0 2d       	mov	r31, r0
 2d0:	e1 2c       	mov	r14, r1
				displayDigit ++;
			}
			
			pb7Flag = 0;		
			
			functionPtr = &display_numerals;
 2d2:	c0 e5       	ldi	r28, 0x50	; 80
 2d4:	d0 e0       	ldi	r29, 0x00	; 0
		{
			if(countDown == 1)
			{				
				countDown = 10;
				
				functionPtr = &display_waiting;
 2d6:	58 01       	movw	r10, r16
	generateTimer();
	generateTimer0();
	
	while(1)
	{
		if(pb7Flag == 1)
 2d8:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <pb7Flag>
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	01 f5       	brne	.+64     	; 0x320 <main+0x8a>
		{
			countDown = 10;
 2e0:	f0 92 00 01 	sts	0x0100, r15	; 0x800100 <__data_start>
 2e4:	2d 2d       	mov	r18, r13
 2e6:	3e 2d       	mov	r19, r14
 2e8:	09 c0       	rjmp	.+18     	; 0x2fc <main+0x66>
			
			//200 ms delay
			while(x < 200)
			{
				if(msDelay == 1 )
 2ea:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <msDelay>
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <main+0x54>
				{
					x++;
					msDelay = 0;
 2f2:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <msDelay>
 2f6:	21 50       	subi	r18, 0x01	; 1
 2f8:	31 09       	sbc	r19, r1
		if(pb7Flag == 1)
		{
			countDown = 10;
			
			//200 ms delay
			while(x < 200)
 2fa:	29 f0       	breq	.+10     	; 0x306 <main+0x70>
			{
				if(msDelay == 1 )
 2fc:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <msDelay>
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	99 f7       	brne	.-26     	; 0x2ea <main+0x54>
 304:	f6 cf       	rjmp	.-20     	; 0x2f2 <main+0x5c>
				}
			}
			
			x = 0;	
			
			if(displayDigit == 9)
 306:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <displayDigit>
 30a:	89 30       	cpi	r24, 0x09	; 9
 30c:	19 f4       	brne	.+6      	; 0x314 <main+0x7e>
			{
				displayDigit = 0;		
 30e:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <displayDigit>
 312:	03 c0       	rjmp	.+6      	; 0x31a <main+0x84>
			}
			else
			{
				displayDigit ++;
 314:	8f 5f       	subi	r24, 0xFF	; 255
 316:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <displayDigit>
			}
			
			pb7Flag = 0;		
 31a:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <pb7Flag>
			
			functionPtr = &display_numerals;
 31e:	8e 01       	movw	r16, r28
		}
		
		if(secDelay == 1)
 320:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <secDelay>
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	79 f4       	brne	.+30     	; 0x346 <main+0xb0>
		{
			if(countDown == 1)
 328:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 32c:	81 30       	cpi	r24, 0x01	; 1
 32e:	21 f4       	brne	.+8      	; 0x338 <main+0xa2>
			{				
				countDown = 10;
 330:	f0 92 00 01 	sts	0x0100, r15	; 0x800100 <__data_start>
				
				functionPtr = &display_waiting;
 334:	85 01       	movw	r16, r10
 336:	05 c0       	rjmp	.+10     	; 0x342 <main+0xac>
			}
			else
			{
				countDown --;
 338:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 33c:	81 50       	subi	r24, 0x01	; 1
 33e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			}
			
			secDelay = 0;
 342:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <secDelay>
		}	

		(*functionPtr)();
 346:	f8 01       	movw	r30, r16
 348:	09 95       	icall

	}
 34a:	c6 cf       	rjmp	.-116    	; 0x2d8 <main+0x42>

0000034c <_exit>:
 34c:	f8 94       	cli

0000034e <__stop_program>:
 34e:	ff cf       	rjmp	.-2      	; 0x34e <__stop_program>
