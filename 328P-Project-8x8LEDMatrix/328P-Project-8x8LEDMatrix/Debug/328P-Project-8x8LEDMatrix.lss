
328P-Project-8x8LEDMatrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  00000336  000003ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000336  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  008001a2  008001a2  0000046c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000029f  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000137  00000000  00000000  000007d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a2  00000000  00000000  0000090a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00000dac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006b27  00000000  00000000  00000e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000022b  00000000  00000000  000079a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00007bce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000096  00000000  00000000  00007c2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	49 c0       	rjmp	.+146    	; 0xa0 <__vector_3>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	59 c0       	rjmp	.+178    	; 0xe0 <__vector_11>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	44 c0       	rjmp	.+136    	; 0xc2 <__vector_14>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 3a       	cpi	r26, 0xA2	; 162
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 ea       	ldi	r26, 0xA2	; 162
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 3a       	cpi	r26, 0xA6	; 166
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	fc d0       	rcall	.+504    	; 0x294 <main>
  9c:	4a c1       	rjmp	.+660    	; 0x332 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <__vector_3>:
									  
***************************************************************************************/


ISR(PCINT0_vect)
{
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	8f 93       	push	r24
	
	if(!(PINB & (1<<7)))
  ac:	1f 99       	sbic	0x03, 7	; 3
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <__vector_3+0x16>
	{
		pb7Flag = 1;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <pb7Flag>
	}

}
  b6:	8f 91       	pop	r24
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
	msDelay = 1;	
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <msDelay>
}
  d4:	8f 91       	pop	r24
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	8f 93       	push	r24
	secDelay = 1;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <secDelay>
}
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <display_numerals>:
void display_numerals(void)
{
	
	int x;
	
	PORTB = 0x00;
  fe:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;
 100:	18 b8       	out	0x08, r1	; 8
	

		for(int k=0; k<8;k++)
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
				PORTD = ~numeralArray[displayDigit][k];
				PORTC = 0x00;
			}
			else
			{
				PORTC = ((0x00) | (1<<(k-4)));
 106:	41 e0       	ldi	r20, 0x01	; 1
 108:	50 e0       	ldi	r21, 0x00	; 0
				PORTD = ~numeralArray[displayDigit][k];
				PORTB = 0b10000000;
 10a:	60 e8       	ldi	r22, 0x80	; 128
	PORTC = 0x00;
	

		for(int k=0; k<8;k++)
		{
			if(k<4)
 10c:	84 30       	cpi	r24, 0x04	; 4
 10e:	91 05       	cpc	r25, r1
 110:	d4 f4       	brge	.+52     	; 0x146 <display_numerals+0x48>
			{
				PORTB = ((0b10000000) | (1<<k));
 112:	9a 01       	movw	r18, r20
 114:	08 2e       	mov	r0, r24
 116:	02 c0       	rjmp	.+4      	; 0x11c <display_numerals+0x1e>
 118:	22 0f       	add	r18, r18
 11a:	33 1f       	adc	r19, r19
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <display_numerals+0x1a>
 120:	20 68       	ori	r18, 0x80	; 128
 122:	25 b9       	out	0x05, r18	; 5
				PORTD = ~numeralArray[displayDigit][k];
 124:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <__data_end>
 128:	fc 01       	movw	r30, r24
 12a:	38 e0       	ldi	r19, 0x08	; 8
 12c:	23 9f       	mul	r18, r19
 12e:	e0 0d       	add	r30, r0
 130:	f1 1d       	adc	r31, r1
 132:	11 24       	eor	r1, r1
 134:	ee 0f       	add	r30, r30
 136:	ff 1f       	adc	r31, r31
 138:	ef 5f       	subi	r30, 0xFF	; 255
 13a:	fe 4f       	sbci	r31, 0xFE	; 254
 13c:	20 81       	ld	r18, Z
 13e:	20 95       	com	r18
 140:	2b b9       	out	0x0b, r18	; 11
				PORTC = 0x00;
 142:	18 b8       	out	0x08, r1	; 8
 144:	1a c0       	rjmp	.+52     	; 0x17a <display_numerals+0x7c>
 146:	9c 01       	movw	r18, r24
 148:	24 50       	subi	r18, 0x04	; 4
 14a:	31 09       	sbc	r19, r1
			}
			else
			{
				PORTC = ((0x00) | (1<<(k-4)));
 14c:	fa 01       	movw	r30, r20
 14e:	02 c0       	rjmp	.+4      	; 0x154 <display_numerals+0x56>
 150:	ee 0f       	add	r30, r30
 152:	ff 1f       	adc	r31, r31
 154:	2a 95       	dec	r18
 156:	e2 f7       	brpl	.-8      	; 0x150 <display_numerals+0x52>
 158:	e8 b9       	out	0x08, r30	; 8
				PORTD = ~numeralArray[displayDigit][k];
 15a:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <__data_end>
 15e:	fc 01       	movw	r30, r24
 160:	38 e0       	ldi	r19, 0x08	; 8
 162:	23 9f       	mul	r18, r19
 164:	e0 0d       	add	r30, r0
 166:	f1 1d       	adc	r31, r1
 168:	11 24       	eor	r1, r1
 16a:	ee 0f       	add	r30, r30
 16c:	ff 1f       	adc	r31, r31
 16e:	ef 5f       	subi	r30, 0xFF	; 255
 170:	fe 4f       	sbci	r31, 0xFE	; 254
 172:	20 81       	ld	r18, Z
 174:	20 95       	com	r18
 176:	2b b9       	out	0x0b, r18	; 11
				PORTB = 0b10000000;
 178:	65 b9       	out	0x05, r22	; 5
			}
			
		   //1 ms delay
			while(x < 1)
			{
				if(msDelay == 1 )
 17a:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <msDelay>
 17e:	21 30       	cpi	r18, 0x01	; 1
 180:	21 f0       	breq	.+8      	; 0x18a <display_numerals+0x8c>
 182:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <msDelay>
 186:	21 30       	cpi	r18, 0x01	; 1
 188:	e1 f7       	brne	.-8      	; 0x182 <display_numerals+0x84>
				{
					x++;
					msDelay = 0;
 18a:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <msDelay>
				}
			}
			
			x = 0;	
			
			PORTB = 0b10000000;
 18e:	65 b9       	out	0x05, r22	; 5
			PORTC = 0x00;
 190:	18 b8       	out	0x08, r1	; 8
	
	PORTB = 0x00;
	PORTC = 0x00;
	

		for(int k=0; k<8;k++)
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	88 30       	cpi	r24, 0x08	; 8
 196:	91 05       	cpc	r25, r1
 198:	09 f0       	breq	.+2      	; 0x19c <display_numerals+0x9e>
 19a:	b8 cf       	rjmp	.-144    	; 0x10c <display_numerals+0xe>
			PORTB = 0b10000000;
			PORTC = 0x00;
			
		}
	
}
 19c:	08 95       	ret

0000019e <display_waiting>:

void display_waiting(void)
{
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
	int x = 0;
	
	displayDigit = 0;
 1a2:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <__data_end>
	
	for(int n=0; n < 8; n++)
 1a6:	a0 e0       	ldi	r26, 0x00	; 0
 1a8:	b0 e0       	ldi	r27, 0x00	; 0
			PORTB = ((0b10000000) | (1<<n));
			PORTC = 0x00;
		}
		else
		{
			PORTC = ((0b10000000) | (1<<(n-4)));
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	70 e0       	ldi	r23, 0x00	; 0
{
	int x = 0;
	
	displayDigit = 0;
	
	for(int n=0; n < 8; n++)
 1ae:	d0 e0       	ldi	r29, 0x00	; 0
 1b0:	c0 e0       	ldi	r28, 0x00	; 0
			PORTB = 0x00;
		}
			
		for(int i = 0; i < 8; i++ )
		{
			PORTD = (0xFF) & (~(1<<i));
 1b2:	f4 e6       	ldi	r31, 0x64	; 100
 1b4:	e0 e0       	ldi	r30, 0x00	; 0
	
	displayDigit = 0;
	
	for(int n=0; n < 8; n++)
	{
		if(n <4)
 1b6:	a4 30       	cpi	r26, 0x04	; 4
 1b8:	b1 05       	cpc	r27, r1
 1ba:	5c f4       	brge	.+22     	; 0x1d2 <display_waiting+0x34>
		{
			PORTB = ((0b10000000) | (1<<n));
 1bc:	cb 01       	movw	r24, r22
 1be:	0a 2e       	mov	r0, r26
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <display_waiting+0x28>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	0a 94       	dec	r0
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <display_waiting+0x24>
 1ca:	80 68       	ori	r24, 0x80	; 128
 1cc:	85 b9       	out	0x05, r24	; 5
			PORTC = 0x00;
 1ce:	18 b8       	out	0x08, r1	; 8
 1d0:	32 c0       	rjmp	.+100    	; 0x236 <display_waiting+0x98>
 1d2:	cd 01       	movw	r24, r26
 1d4:	04 97       	sbiw	r24, 0x04	; 4
		}
		else
		{
			PORTC = ((0b10000000) | (1<<(n-4)));
 1d6:	9b 01       	movw	r18, r22
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <display_waiting+0x40>
 1da:	22 0f       	add	r18, r18
 1dc:	33 1f       	adc	r19, r19
 1de:	8a 95       	dec	r24
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <display_waiting+0x3c>
 1e2:	c9 01       	movw	r24, r18
 1e4:	80 68       	ori	r24, 0x80	; 128
 1e6:	88 b9       	out	0x08, r24	; 8
			PORTB = 0x00;
 1e8:	15 b8       	out	0x05, r1	; 5
 1ea:	25 c0       	rjmp	.+74     	; 0x236 <display_waiting+0x98>
		}
			
		for(int i = 0; i < 8; i++ )
		{
			PORTD = (0xFF) & (~(1<<i));
 1ec:	cb 01       	movw	r24, r22
 1ee:	04 2e       	mov	r0, r20
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <display_waiting+0x58>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	0a 94       	dec	r0
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <display_waiting+0x54>
 1fa:	80 95       	com	r24
 1fc:	8b b9       	out	0x0b, r24	; 11
 1fe:	2f 2f       	mov	r18, r31
 200:	3e 2f       	mov	r19, r30
 202:	09 c0       	rjmp	.+18     	; 0x216 <display_waiting+0x78>
			
			//100 ms delay
			while(x < 100)
			{
				if(msDelay == 1 )
 204:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <msDelay>
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	e1 f7       	brne	.-8      	; 0x204 <display_waiting+0x66>
				{
					x++;
					msDelay = 0;
 20c:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <msDelay>
 210:	21 50       	subi	r18, 0x01	; 1
 212:	31 09       	sbc	r19, r1
		for(int i = 0; i < 8; i++ )
		{
			PORTD = (0xFF) & (~(1<<i));
			
			//100 ms delay
			while(x < 100)
 214:	29 f0       	breq	.+10     	; 0x220 <display_waiting+0x82>
			{
				if(msDelay == 1 )
 216:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <msDelay>
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	99 f7       	brne	.-26     	; 0x204 <display_waiting+0x66>
 21e:	f6 cf       	rjmp	.-20     	; 0x20c <display_waiting+0x6e>
		{
			PORTC = ((0b10000000) | (1<<(n-4)));
			PORTB = 0x00;
		}
			
		for(int i = 0; i < 8; i++ )
 220:	4f 5f       	subi	r20, 0xFF	; 255
 222:	5f 4f       	sbci	r21, 0xFF	; 255
 224:	48 30       	cpi	r20, 0x08	; 8
 226:	51 05       	cpc	r21, r1
 228:	09 f7       	brne	.-62     	; 0x1ec <display_waiting+0x4e>
{
	int x = 0;
	
	displayDigit = 0;
	
	for(int n=0; n < 8; n++)
 22a:	11 96       	adiw	r26, 0x01	; 1
 22c:	a8 30       	cpi	r26, 0x08	; 8
 22e:	b1 05       	cpc	r27, r1
 230:	09 f0       	breq	.+2      	; 0x234 <display_waiting+0x96>
 232:	c1 cf       	rjmp	.-126    	; 0x1b6 <display_waiting+0x18>
 234:	03 c0       	rjmp	.+6      	; 0x23c <display_waiting+0x9e>
 236:	4d 2f       	mov	r20, r29
 238:	5c 2f       	mov	r21, r28
 23a:	d8 cf       	rjmp	.-80     	; 0x1ec <display_waiting+0x4e>
			}
			
			x = 0;			
		}
	}
}
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <generateTimer>:

void generateTimer(void)
{ 
	TCCR1A |= (1<<WGM12); //Set to CTC Mode
 242:	e0 e8       	ldi	r30, 0x80	; 128
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	88 60       	ori	r24, 0x08	; 8
 24a:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS12) | (1<<CS10);
 24c:	e1 e8       	ldi	r30, 0x81	; 129
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	85 60       	ori	r24, 0x05	; 5
 254:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A);
 256:	ef e6       	ldi	r30, 0x6F	; 111
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	82 60       	ori	r24, 0x02	; 2
 25e:	80 83       	st	Z, r24
	OCR1A = 7813;
 260:	85 e8       	ldi	r24, 0x85	; 133
 262:	9e e1       	ldi	r25, 0x1E	; 30
 264:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 268:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 26c:	08 95       	ret

0000026e <generateTimer0>:
}

void generateTimer0(void)
{ 
	ADCSRB |= (1<<ADTS0) | (1<<ADTS1); //Set Timer/Counter 0 Compare Match A
 26e:	eb e7       	ldi	r30, 0x7B	; 123
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	83 60       	ori	r24, 0x03	; 3
 276:	80 83       	st	Z, r24
	
	TCCR0B |= (1<<CS00) | (1<<CS02); //Set prescaler to 1024
 278:	85 b5       	in	r24, 0x25	; 37
 27a:	85 60       	ori	r24, 0x05	; 5
 27c:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= (1<<WGM01);  //Set to CTC Mode
 27e:	84 b5       	in	r24, 0x24	; 36
 280:	82 60       	ori	r24, 0x02	; 2
 282:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= (1<<OCIE0A); //Compare Match A interrupt enabled
 284:	ee e6       	ldi	r30, 0x6E	; 110
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	82 60       	ori	r24, 0x02	; 2
 28c:	80 83       	st	Z, r24
	
	OCR0A = 10;
 28e:	8a e0       	ldi	r24, 0x0A	; 10
 290:	87 bd       	out	0x27, r24	; 39
 292:	08 95       	ret

00000294 <main>:

int main(void)
{
	int x;
	
	DDRD = 0xFF;//PORTB,C,D are set as output
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b01111111;
 298:	9f e7       	ldi	r25, 0x7F	; 127
 29a:	94 b9       	out	0x04, r25	; 4
	DDRC = 0xFF;
 29c:	87 b9       	out	0x07, r24	; 7

	PORTB |= (1 << PORTB7);  //set pull up	
 29e:	2f 9a       	sbi	0x05, 7	; 5
	
	PCICR |= (1 << PCIE0);  // enable PCMSK0 scan
 2a0:	e8 e6       	ldi	r30, 0x68	; 104
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	81 60       	ori	r24, 0x01	; 1
 2a8:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0); //PCINT0 will trigger on state change
 2aa:	eb e6       	ldi	r30, 0x6B	; 107
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	81 60       	ori	r24, 0x01	; 1
 2b2:	80 83       	st	Z, r24
	
	sei();
 2b4:	78 94       	sei
	
	generateTimer();
 2b6:	c5 df       	rcall	.-118    	; 0x242 <generateTimer>
	generateTimer0();
 2b8:	da df       	rcall	.-76     	; 0x26e <generateTimer0>
	
	while(1)
	{
		if(pb7Flag == 1)
		{
			countDown = 10;
 2ba:	ca e0       	ldi	r28, 0x0A	; 10
 2bc:	18 ec       	ldi	r17, 0xC8	; 200
 2be:	d0 e0       	ldi	r29, 0x00	; 0
	generateTimer();
	generateTimer0();
	
	while(1)
	{
		if(pb7Flag == 1)
 2c0:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <pb7Flag>
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	01 f5       	brne	.+64     	; 0x308 <main+0x74>
		{
			countDown = 10;
 2c8:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 2cc:	21 2f       	mov	r18, r17
 2ce:	3d 2f       	mov	r19, r29
 2d0:	09 c0       	rjmp	.+18     	; 0x2e4 <main+0x50>
			
			//200 ms delay
			while(x < 200)
			{
				if(msDelay == 1 )
 2d2:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <msDelay>
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <main+0x3e>
				{
					x++;
					msDelay = 0;
 2da:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <msDelay>
 2de:	21 50       	subi	r18, 0x01	; 1
 2e0:	31 09       	sbc	r19, r1
		if(pb7Flag == 1)
		{
			countDown = 10;
			
			//200 ms delay
			while(x < 200)
 2e2:	29 f0       	breq	.+10     	; 0x2ee <main+0x5a>
			{
				if(msDelay == 1 )
 2e4:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <msDelay>
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	99 f7       	brne	.-26     	; 0x2d2 <main+0x3e>
 2ec:	f6 cf       	rjmp	.-20     	; 0x2da <main+0x46>
				}
			}
			
			x = 0;	
			
			if(displayDigit == 9)
 2ee:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
 2f2:	89 30       	cpi	r24, 0x09	; 9
 2f4:	19 f4       	brne	.+6      	; 0x2fc <main+0x68>
			{
				displayDigit = 0;		
 2f6:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <__data_end>
 2fa:	03 c0       	rjmp	.+6      	; 0x302 <main+0x6e>
			}
			else
			{
				displayDigit ++;
 2fc:	8f 5f       	subi	r24, 0xFF	; 255
 2fe:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__data_end>
			}
			
			pb7Flag = 0;		
 302:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <pb7Flag>
			
			display_numerals();	
 306:	fb de       	rcall	.-522    	; 0xfe <display_numerals>
		}
		
		if(secDelay == 1)
 308:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <secDelay>
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	79 f4       	brne	.+30     	; 0x32e <main+0x9a>
		{
			if(countDown == 1)
 310:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	21 f4       	brne	.+8      	; 0x320 <main+0x8c>
			{				
				countDown = 10;
 318:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
				display_waiting();
 31c:	40 df       	rcall	.-384    	; 0x19e <display_waiting>
 31e:	05 c0       	rjmp	.+10     	; 0x32a <main+0x96>
			}
			else
			{
				countDown --;
 320:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 324:	81 50       	subi	r24, 0x01	; 1
 326:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			}
			
			secDelay = 0;
 32a:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <secDelay>
		}	
		
		display_numerals();	
 32e:	e7 de       	rcall	.-562    	; 0xfe <display_numerals>
	}
 330:	c7 cf       	rjmp	.-114    	; 0x2c0 <main+0x2c>

00000332 <_exit>:
 332:	f8 94       	cli

00000334 <__stop_program>:
 334:	ff cf       	rjmp	.-2      	; 0x334 <__stop_program>
